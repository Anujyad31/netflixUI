{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","name","id","style","padding","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b189d7ec.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/** base url to make request to the themoviedatabase */\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\n// instance.get('/foo-bar');\r\n// https://api.themoviedb.org/3/foo-bar\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\"\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n\r\n    async function fetchData() {\r\n\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"99%\",\r\n    playerVars: {\r\n      autoplay: 0,\r\n    }\r\n  }\r\n\r\n  const handleClick = (movie) => {\r\n    // console.table(movie?.title)\r\n    if (trailerUrl) {\r\n      setTrailerUrl('')\r\n    } else {\r\n      movieTrailer(movie?.title || \"\")\r\n        .then(url => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'));\r\n        }).catch((error) => console.log(error));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map(movie => {\r\n          return <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n            alt={movie.name} />\r\n        })}\r\n      </div>\r\n      <div style={{ padding: \"40px\" }}>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = '47857a9698858da509a2beaae26e243a';\r\n\r\nconst requests = {\r\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\r\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\"\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    async function fetchData() {\r\n\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n        Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      // Math.floor(Math.random() * request.data.results.length -1)\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // console.log(movie)\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition: \"center center\"\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleshow] = useState(false)\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleshow(true)\r\n      } else handleshow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\")\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Row from './Row';\r\nimport requests from './requests';\r\nimport Banner from './Banner';\r\nimport Nav from './Nav';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<Nav />\r\n\t\t\t<Banner />\r\n\t\t\t<Row title=\"NETFLIX ORIGINALS\" isLargeRow fetchUrl={requests.fetchNetflixOriginals} />\r\n\t\t\t<Row title=\"Trending\" fetchUrl={requests.fetchTrending} />\r\n\t\t\t<Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n\t\t\t<Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n\t\t\t<Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n\t\t\t<Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n\t\t\t<Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n\t\t\t<Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}